STACK_SEG SEGMENT STACK USE16
 DB 100 DUP(?)
STACK_SEG ENDS
DATA_SEG SEGMENT 'DATA' USE16
MESSAGE DB 'CE302 LAB3',0DH,0AH
		DB 'ENTER A STRING FROM KEYBORD: $'
OUTMSG1 DB 0DH,0AH,'UC $'
OUTMSG2 DB 0DH,0AH,'LC $'
OUTMSG3 DB 0DH,0AH,'NB $'
OUTMSG4 DB 0DH,0AH,'SB $'
INCHAR DB ?
INSTRING DB 80,?,80 DUP('$')
NEWLINE DB 0DH,0AH,'$'
DATA_SEG ENDS
CODE_SEG SEGMENT PARA 'CODE' PUBLIC USE16
ASSUME CS:CODE_SEG, DS:DATA_SEG, SS:STACK_SEG
MAIN PROC FAR
 PUSH DS ; INITIATE THE PROGRAM
 XOR AX,AX
 PUSH AX
 MOV AX,DATA_SEG
 MOV DS,AX
 
 LEA DX,MESSAGE ; PRINT MESSAGE -> WELCOME AND INPUT A STRING
 MOV AH,9
 INT 21H
 
 MOV AH,0AH ; READ A STRING
 LEA DX,INSTRING
 INT 21H

 LEA DI,INSTRING+2 ; ASSIGN STRING TO DI REGISTER (+2 IS FOR READABLE AREA)
 XOR BX,BX ; SET YOUR REGISTER TO 0 BY USING XOR (BX=0)
 MOV BL,[DI] ; ASSIGN THE CURRENT CHARACTER TO A REGISTER
 
 BACK:
 CMP BL,41H ; IF INPUT CHAR IS LESS THAN 41H RETURN FALSE(IF BL<41H:F?T)
 JB NOUPPERCASE 
 CMP BL,5AH ; IF INPUT CHAR IS MORE THAN 5AH RETURN FALSE(IF BL>5AH:F?T)
 JA NOUPPERCASE
 
 MOV AH,9 ; PRINT UPPERCASE IF BOTH CMP CONDITIONS ARE RETURNED TRUE
 LEA DX, OUTMSG1 
 INT 21H
 
 JMP AGAIN ; CHECK CONDITIONS FOR LOOP BACK
 
 NOUPPERCASE:
 CMP BL,61H ; IF INPUT CHAR IS LESS THAN 61H RETURN FALSE(IF BL<61H:F?T)
 JB NUMBER
 CMP BL,7AH ; IF INPUT CHAR IS MORE THAN 7AH RETURN FALSE(IF BL>7AH:F?T)
 JA NUMBER
 
 MOV AH,9 ; PRINT LOWERCASE IF BOTH CMP CONDITIONS ARE RETURNED TRUE
 LEA DX, OUTMSG2 
 INT 21H
 
 JMP AGAIN ; CHECK CONDITIONS FOR LOOP BACK
 
 
  ; 		---@@@ ASSIGNMENT 1 @@@---
  ; IMPLEMENT NUMBERS AND SYMBOLS STARTING FROM HERE
  ;					--------
 
 
 NUMBER:
 CMP BL,30H ; IF INPUT CHAR IS LESS THAN 30H RETURN FALSE(IF BL<30H:F?T)
 JB SYMBOL
 CMP BL,39H ; IF INPUT CHAR IS MORE THAN 39H RETURN FALSE(IF BL>39H:F?T)
 JA SYMBOL
 
 MOV AH,9 ; PRINT NUMBER IF BOTH CMP CONDITIONS ARE RETURNED TRUE
 LEA DX, OUTMSG3 
 INT 21H
 
 JMP AGAIN ; CHECK CONDITIONS FOR LOOP BACK 

 SYMBOL:
 MOV AH,9 ; PRINT SYMBOL
 LEA DX, OUTMSG4 
 INT 21H



 AGAIN:
 INC DI ; MOVE TO NEXT CHARACTER
 MOV BL,[DI] ; ASSIGN THE CURRENT CHARACTER TO A REGISTER
 CMP BL,24H ; IS BL IS EQUAL TO "$" (END OF STRING) ? IF TRUE EXIT ELSE LOOP BACK
 JE EXITPROGRAM ; CLOSE PROGRAM
 JMP BACK ; ELSE LOOP BACK
 EXITPROGRAM: 
 RET
 
MAIN ENDP
CODE_SEG ENDS
END MAIN 